name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - uses: actions/checkout@v5
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build
      run: npm run build
    
    - name: Run linter
      run: npm run lint
    
    - name: Run type check
      run: npm run typecheck
    
    - name: Run tests
      run: npm test
    
    - name: Run E2E test
      run: |
        # Test the CLI works
        node dist/cli.js --help
        
        # Test generate command
        node dist/cli.js generate --output test.env
        test -f test.env
        grep -q "FRONTEND_PORT" test.env
        grep -q "BACKEND_PORT" test.env
        
        # Cleanup
        rm -f test.env

  check-version:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    outputs:
      version-changed: ${{ steps.check.outputs.changed }}
      new-version: ${{ steps.check.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 2

      - name: Check if version changed
        id: check
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          git checkout HEAD~1
          PREVIOUS_VERSION=$(node -p "require('./package.json').version" 2>/dev/null || echo "0.0.0")
          git checkout -
          
          if [ "$CURRENT_VERSION" != "$PREVIOUS_VERSION" ]; then
            echo "Version changed from $PREVIOUS_VERSION to $CURRENT_VERSION"
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          else
            echo "Version unchanged ($CURRENT_VERSION)"
            echo "changed=false" >> $GITHUB_OUTPUT
          fi

  build-and-publish:
    needs: [test, check-version]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && needs.check-version.outputs.version-changed == 'true'
    
    steps:
    - uses: actions/checkout@v5
    
    - name: Use Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22.x'
        registry-url: 'https://registry.npmjs.org'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build
      run: npm run build
    
    - name: Publish to npm
      run: npm publish --access public
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

    - name: Create Git Tag
      run: |
        VERSION=$(node -p "require('./package.json').version")
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"
        git tag -a "v$VERSION" -m "Release v$VERSION"
        git push origin "v$VERSION"

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: v${{ needs.check-version.outputs.new-version }}
        generate_release_notes: true